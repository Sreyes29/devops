pipeline {
    agent any

    environment {
        SONAR_TOKEN     = credentials('SONAR_TOKEN') // SonarQube token
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        PROD_VM_IP = credentials('prod-vm-ip') // Jenkins credential for VM IP
        SSH_USER = 'jenkins' // SSH username
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo 'Repository checkout complete'
            }
        }

        stage('Build') {
            steps {
                dir('petclinic') {
                    sh 'mvn -B clean package -DskipTests'
                }
                echo 'Build completed'
            }
        }

        stage('Test') {
            steps {
                dir('petclinic') {
                    sh 'mvn test'
                }
                echo 'Tests completed'
            }
        }

        stage('Static Analysis') {
            steps {
                withSonarQubeEnv('petclinic-sonarqube') { // Use the SonarQube server configured in Jenkins
                    dir('petclinic') {
                        // Run SonarQube analysis with token sqa_8ac139293b7c2f309e0a8ef769f0ff852f043c9c
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=http://host.docker.internal:9000'
                    }
                }
            }
        }

        stage('ZAP Scan via API') {
            steps {
                sh '''
                # Wait for ZAP to fully start (optional sleep or health check)
                sleep 10
                # Spider the app
                curl "http://zap:8090/JSON/spider/action/scan/?url=http://petclinic:8080&apikey=zap-api-key"
                # Wait for spider to finish
                sleep 10
                # Active scan
                curl "http://zap:8090/JSON/ascan/action/scan/?url=http://petclinic:8080&apikey=zap-api-key"
                # Wait for scan to complete (polling can be added)
                sleep 30
                # Get HTML report
                curl "http://zap:8090/OTHER/core/other/htmlreport/?apikey=zap-api-key" -o zap-report.html
                '''
            }
        }

        stage('Publish ZAP Report') {
            steps {
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    reportName: 'ZAP Report',
                    reportDir: '.',
                    reportFiles: 'zap-report.html',
                    keepAll: true
                ])
            }
        }

        stage('Prepare Deployment') {
            steps {
                sh '''
                # Create a deployment package
                mkdir -p deployment-package
                cp petclinic/target/*.jar deployment-package/petclinic.jar
                cp deployment/* deployment-package/
                chmod +x deployment-package/*.sh
                '''
            }
        }

        stage('Deploy to VM') {
            steps {
                sshagent(['prod-vm-ssh-key']) { // Use Jenkins' SSH Agent plugin with credentials ID 'jenkins-ssh-key'
                    sh '''
                        # Create deployment directory on remote server
                        ssh -o StrictHostKeyChecking=no ${SSH_USER}@${PROD_VM_IP} "mkdir -p ~/petclinic-deployment"
                        
                        # Copy deployment package to the VM
                        scp -o StrictHostKeyChecking=no -r deployment-package/* ${SSH_USER}@${PROD_VM_IP}:~/petclinic-deployment/
                        
                        # Execute remote setup script
                        ssh -o StrictHostKeyChecking=no ${SSH_USER}@${PROD_VM_IP} "cd ~/petclinic-deployment && sudo ./setup.sh"
                    '''
                }
            }
        }

    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}