pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo 'Repository checkout complete'
            }
        }

        stage('Build') {
            steps {
                dir('petclinic') {
                    sh 'mvn -B clean package -DskipTests'
                }
                echo 'Build completed'
            }
        }

        stage('Test') {
            steps {
                dir('petclinic') {
                    sh 'mvn test'
                }
                echo 'Tests completed'
            }
        }

        stage('Static Analysis') {
            steps {
                withSonarQubeEnv('petclinic-sonarqube') { // Use the SonarQube server configured in Jenkins
                    dir('petclinic') {
                        // Run SonarQube analysis with token TODO: remove hard code
                        sh 'mvn sonar:sonar -Dsonar.login=squ_ed4f0c94df65377082e7489d3ac19025abd0214c -Dsonar.host.url=http://host.docker.internal:9000'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                // Wait for SonarQube to evaluate the code and return a quality gate result
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
                echo "Quality gate passed"
            }
        }

        stage('ZAP Scan') {
            steps {
                sh '''
                docker run --rm --network=petclinic-devsecops-network \
                    -v $(pwd):/zap/wrk:rw \
                    owasp/zap2docker-stable zap-baseline.py \
                    -t http://petclinic:8080 \
                    -r zap-report.html \
                    -z "-config api.key=zap-api-key"
                '''
            }
        }
        
        stage('Publish ZAP Report') {
            steps {
                sh 'ls -l' // debug: check if zap-report.html exists
                publishHTML([
                allowMissing: false,                 // Add this line
                alwaysLinkToLastBuild: true,        // Add this line
                reportName: 'ZAP Report',
                reportDir: '.',
                reportFiles: 'zap-report.html',
                keepAll: true
                ])
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}