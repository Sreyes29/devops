pipeline {
    agent any

    environment {
        SONAR_TOKEN     = credentials('SONAR_TOKEN') // SonarQube token
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        PROD_VM_IP = credentials('prod-vm-ip') // Jenkins credential for VM IP
        SSH_KEY = credentials('prod-vm-ssh-key') // SSH key credential for authentication
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo 'Repository checkout complete'
            }
        }

        stage('Build') {
            steps {
                dir('petclinic') {
                    sh 'mvn -B clean package -DskipTests'
                }
                echo 'Build completed'
            }
        }

        stage('Test') {
            steps {
                dir('petclinic') {
                    sh 'mvn test'
                }
                echo 'Tests completed'
            }
        }

        stage('Static Analysis') {
            steps {
                withSonarQubeEnv('petclinic-sonarqube') { // Use the SonarQube server configured in Jenkins
                    dir('petclinic') {
                        // Run SonarQube analysis with token TODO: sqa_8ac139293b7c2f309e0a8ef769f0ff852f043c9c
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=http://host.docker.internal:9000'
                    }
                }
            }
        }

        stage('ZAP Scan via API') {
            steps {
                sh '''
                # Wait for ZAP to fully start (optional sleep or health check)
                sleep 10
                # Spider the app
                curl "http://zap:8090/JSON/spider/action/scan/?url=http://petclinic:8080&apikey=zap-api-key"
                # Wait for spider to finish
                sleep 10
                # Active scan
                curl "http://zap:8090/JSON/ascan/action/scan/?url=http://petclinic:8080&apikey=zap-api-key"
                # Wait for scan to complete (polling can be added)
                sleep 30
                # Get HTML report
                curl "http://zap:8090/OTHER/core/other/htmlreport/?apikey=zap-api-key" -o zap-report.html
                '''
            }
        }

        stage('Publish ZAP Report') {
            steps {
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    reportName: 'ZAP Report',
                    reportDir: '.',
                    reportFiles: 'zap-report.html',
                    keepAll: true
                ])
            }
        }

        stage('Prepare Deployment') {
            steps {
                // Archive the JAR or WAR for deployment
                dir('petclinic') {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
                
                // Copy artifact to workspace for Ansible to use
                sh 'mkdir -p deployment'
                sh 'cp petclinic/target/*.jar deployment/petclinic.jar'
                
                // Create Ansible inventory file
                writeFile file: 'deployment/inventory.ini', text: """
                [production]
                prodserver ansible_host=${PROD_VM_IP} ansible_user=ubuntu ansible_ssh_private_key_file=${SSH_KEY}
                
                [all:vars]
                ansible_python_interpreter=/usr/bin/python3
                """
            }
        }
        
        stage('Deploy with Ansible') {
            steps {
                // Write the Ansible playbook
                writeFile file: 'deployment/deploy.yml', text: '''
                ---
                - name: Deploy Spring PetClinic
                  hosts: production
                  become: yes
                  tasks:
                    - name: Ensure Java is installed
                      apt:
                        name: openjdk-17-jre
                        state: present
                        update_cache: yes
                    
                    - name: Create application directory
                      file:
                        path: /opt/petclinic
                        state: directory
                        mode: '0755'
                    
                    - name: Copy JAR file
                      copy:
                        src: petclinic.jar
                        dest: /opt/petclinic/petclinic.jar
                        mode: '0755'
                    
                    - name: Create systemd service file
                      copy:
                        content: |
                          [Unit]
                          Description=Spring PetClinic Application
                          After=network.target
                          
                          [Service]
                          User=ubuntu
                          ExecStart=/usr/bin/java -jar /opt/petclinic/petclinic.jar
                          SuccessExitStatus=143
                          Restart=always
                          RestartSec=5
                          
                          [Install]
                          WantedBy=multi-user.target
                        dest: /etc/systemd/system/petclinic.service
                        mode: '0644'
                    
                    - name: Reload systemd
                      systemd:
                        daemon_reload: yes
                    
                    - name: Enable and restart PetClinic service
                      systemd:
                        name: petclinic
                        enabled: yes
                        state: restarted
                '''
                
                // Run the Ansible playbook
                dir('deployment') {
                    ansiblePlaybook(
                        playbook: 'deploy.yml',
                        inventory: 'inventory.ini',
                        colorized: true
                    )
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                // Wait for application to start
                sh 'sleep 30'
                
                // Check if application is running
                sh "curl -s --retry 5 --retry-delay 10 http://${PROD_VM_IP}:8080/actuator/health || exit 1"
                
                echo 'Deployment verified successfully!'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}